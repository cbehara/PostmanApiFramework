{
	"info": {
		"_postman_id": "9189989b-9b6e-41e3-b912-f2a55f5d5ac7",
		"name": "DataApi_Test",
		"description": "This collection which contains IntermedaiteData and MetaData API services \n\nIntermedaiteData:\n1.POST-Subscribe The Topic\n2.GET-All Subscriptions Data\n3.GET-One Subscription Data\n4.GET-Data As per Subscription Key\n5.DELETE-Subscription By ID\n\nMetaData:\n1.GetAll_TMS_Records\n2.Get_TMS_ByLocode\n3.Get_Objects_ByLocode\n4.Get_SpecificObect_ByLocode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "AccessToken ",
					"item": [
						{
							"name": "Accesstoken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a479cecc-4627-457b-9010-0f928d1591b0",
										"exec": [
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.access_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "tdb-user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "curl",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "\"openid\",\"offline_access\",\"profile\",\"email\"",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://iam.tdb.test.its-siemens.com/auth/realms/its/protocol/openid-connect/token",
									"protocol": "https",
									"host": [
										"iam",
										"tdb",
										"test",
										"its-siemens",
										"com"
									],
									"path": [
										"auth",
										"realms",
										"its",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "MetaData",
					"item": [
						{
							"name": "GET-Positive",
							"item": [
								{
									"name": "Get metadata records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8682a053-8f39-47d0-890c-7a05c5ba0fe8",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(10000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAll_TMS_Records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4036e52a-3940-4fc0-80c5-7ec467b6003c",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(10000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{accessToken}}",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_TMS_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "218e1ddb-34ff-4155-a872-ddcb1a908b32",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"tmsUrl field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsUrl).is.to.equal(\"http://neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    */\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"tmsUrl\", jsonData[0].tmsUrl);\r",
													"postman.setEnvironmentVariable(\"tmsName\", jsonData[0].tmsName);\r",
													"postman.setEnvironmentVariable(\"locode\", jsonData[0].locode);\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "105b75ea-2360-438a-b96d-64cfddfea5c4",
												"exec": [
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													" \r",
													"//->10.json data parsing \r",
													"/*var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData[20].objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData[20].protocol);\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b303964a-890c-4017-9942-d2744a844ef5",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"/*pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData.tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData.locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    \r",
													"     \r",
													"pm.test(\"ObjectName field is present in response\", function () { \r",
													"        pm.expect(jsonData.objectName).is.to.equal(pm.environment.get(\"objectName\")); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Protocol field is present in response\", function () { \r",
													"        pm.expect(jsonData.protocol).is.to.equal(pm.environment.get(\"protocol\")); \r",
													"    });\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData.objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData.protocol);\r",
													"console.log('objectName is ',pm.environment.get(\"objectName\"));\r",
													"console.log('protocol is ',pm.environment.get(\"protocol\"));\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "DE-HB-AAA",
													"type": "string"
												},
												{
													"key": "object",
													"value": "NamedValue_Raw_Values",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ByIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ea52ea5-fd9f-4dc2-8cb0-69cb8bba508f",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 100000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 2mb\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"ID\", jsonData[0].id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "DE-BW-FDH",
													"type": "string"
												},
												{
													"key": "object",
													"value": "IntersectionStatus",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ById",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edfc340a-eb98-443d-a387-6e45081ae33e",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 100000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 2mb\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id/:id/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id",
												":id",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "DE-BW-FDH",
													"type": "string"
												},
												{
													"key": "object",
													"value": "IntersectionStatus",
													"type": "string"
												},
												{
													"key": "id",
													"value": "K204",
													"type": "string"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET-Negative",
							"item": [
								{
									"name": "Get_TMS_ByLocode  with invalid locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfde6658-6c13-4e59-b64b-767fd9898341",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"    \r",
													"pm.test(\"Check the message in response is No TMS found for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No TMS found for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode With Invalid Locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e39cf109-53d4-416f-ae9f-da3b7cffc2a7",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"    \r",
													"pm.test(\"Check the message in response is No objects configured for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No objects configured for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode with Invalid Object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b91ed5f4-07a1-47a8-8557-d89b718c6664",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object type is not configured\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object type is not configured\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												},
												{
													"key": "object",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OnlineData(hot)-KafkaConnector-Presto",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e281c3b0-f18b-4061-847d-28f5c17ec31e",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"{{category}}\",\r\n  \"filters\": [\r\n   {\r\n      \"type\": \"OBJECT_TYPE\",\r\n      \"value\": \"{{OBJECT_TYPE}}\"\r\n    },\r\n    {\r\n      \"type\": \"LOCODE\",\r\n      \"value\": \"{{LOCODE}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"type": "string",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c2b46ef-6837-449f-bda0-c00e31d90e01",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 2MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"/*",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa00f4a9-984f-4258-a490-e3d824f88c41",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 15KB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8749dae6-7968-4477-bcd8-1fc7eede6737",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 5MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"//->10.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff79e6df-d6a7-4319-9559-f58286ec711d",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 15KB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "IntermediateData(Warm)-MongoDB-Presto",
					"item": [
						{
							"name": "POST-Subscribe The Topic",
							"item": [
								{
									"name": "200-Success/Ok",
									"item": [
										{
											"name": "Subscribe The Topic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "583b97ae-9abb-4b1e-861c-2dd13415eb34",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															"//->3.Verify the response should be successfull\r",
															"pm.test(\"response should be okay to process\", function () { \r",
															"    pm.response.to.not.be.error; \r",
															"    pm.response.to.not.have.jsonBody(\"error\"); \r",
															"});\r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 200 || responseCode.code === 201) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 1MB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(1000000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"pm.test(\"Filter field is present in response\", function () { \r",
															"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
															"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
															"        pm.expect(jsonData.filters[2].type).is.to.equal(\"FROM_TIME\");\r",
															"        pm.expect(jsonData.filters[3].type).is.to.equal(\"TO_TIME\");\r",
															"    });\r",
															"    \r",
															"  \r",
															"\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															"//->10.json data parsing \r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
															"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
															"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
															"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
															"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
															"postman.setEnvironmentVariable(\"LOCODE\", jsonData.filters[1].value);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "01b1a54c-64df-4917-a853-02df426e1f3e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "404-Not Found",
									"item": [
										{
											"name": "Subscrive the topic WIth blank ConsumerID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2d85e9f7-bd2b-4e51-8eff-6fb3f27eb098",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(1000000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9201e8b5-1dc3-4ae7-92f1-c6f45880c255",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "400- Bad Request",
									"item": [
										{
											"name": "Subscribe The Topic  with balnk Catagory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef74ab7a-5a89-47ed-b0f8-d4684b41c5e0",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 400) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "44398c94-4113-4300-8b0a-bb995cc303e2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \" \",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Subscribe The Topic  with balnk or invalid ObjectType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fa702108-6b62-40ab-b3e0-b712bd23af84",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 400) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 400\", function () { \r",
															"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
															"    });\r",
															"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Object Type field is invalid or blank\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Object Type field is invalid or blank\"); \r",
															"    });\r",
															"    */\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "246130b6-d217-4694-8a75-ffee300029fd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \" \"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Subscribe The Topic  with Locode field is invalid or blank",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b490352b-f8c7-4e92-82c0-8bb06ea5ea8e",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 400) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c31fa218-47e0-4850-abe1-b6523f2c6582",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Subscribe The Topic  without From Time or To Time field is invalid or blank",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c2890bc-412f-4268-93eb-ac34ef1c69e6",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 400) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9ff23d10-110e-44ec-b62e-88a459648dc2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "401-UnAuthorized",
									"item": [
										{
											"name": "Subscribe The Topic  without AccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ff42bdac-c26f-4ae3-aa18-50c99358dfd2",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 401) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\",\r",
															"        \"Transfer-Encoding\" : \"chunked\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"pm.test(\"check the status code in response is 401\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(401); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
															"    });\r",
															"\r",
															"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
															"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
															"    });\r",
															"    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5937cb41-fe9a-43b3-a0d8-2a09ede081b3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET-All Subscriptions Data",
							"item": [
								{
									"name": "200-Success/Ok",
									"item": [
										{
											"name": "Get All Subscriptions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1815fbc3-9746-4803-9b0b-13088185051f",
														"exec": [
															"",
															"//->1.Verify the status code in response body",
															"pm.test(\"Request was successful and Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"}); ",
															"",
															"//->2.Verify the Header is present or not ",
															"pm.test(\"Content-Type header is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    ",
															"//->3.Verify the response should be successfull",
															"pm.test(\"response should be okay to process\", function () { ",
															"    pm.response.to.not.be.error; ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															" ",
															"// ->4.Verify the response must be valid json body ",
															"pm.test(\"response must be valid and have a json body\", function () {",
															"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
															"     // assert that the response has a valid JSON body",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
															"});",
															"",
															"//->5. Verify the Response headers ",
															"pass = true;",
															"fail = false;",
															"",
															"if (responseCode.code === 200 || responseCode.code === 201) {",
															"    tests[\"Request Succesfully Sent\"] = pass;",
															"",
															"    headers = {",
															"        \"Content-Type\": \"application/json\"",
															"    }",
															"",
															"    for (var i in headers) {",
															"        result = postman.getResponseHeader(i);",
															"        if (headers[i] === result)",
															"            tests[i + \" header value is present\"] = pass;",
															"        else",
															"            tests[i + \" header value is not present\"] = fail;",
															"",
															"    }",
															"    ",
															"}",
															"",
															"});",
															"",
															"//->6.print the json response ",
															"var jsonData = pm.response.json(); ",
															"console.log(jsonData);",
															"",
															"//->7.Verify the Response Time ",
															"pm.test(\"Response time is less than 30000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);",
															"});",
															"//->7.Verify the Response Size",
															"pm.test(\"Response size is less than 1MB\", function () {",
															"    pm.expect(pm.response.responseSize).to.be.below(1000000);",
															"});",
															"",
															"//->8.Verify the Response  data ",
															"var jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Response is not null\", function () { ",
															"        pm.expect(jsonData).to.not.equal(null);",
															"    });",
															"/*",
															"pm.test(\"consumerId field is present in response\", function () { ",
															"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
															"    });",
															"pm.test(\"category field is present in response\", function () { ",
															"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
															"    });",
															"    ",
															"pm.test(\"dataEndpoint field is present in response\", function () { ",
															"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
															"    });  ",
															"",
															"pm.test(\"Filter field is present in response\", function () { ",
															"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
															"        pm.expect(jsonData[0].filters[1].type).is.to.equal(\"LOCODE\");",
															"        pm.expect(jsonData[0].filters[2].type).is.to.equal(\"FROM_TIME\");",
															"        pm.expect(jsonData[0].filters[3].type).is.to.equal(\"TO_TIME\");",
															"    });",
															"",
															"*/",
															"//->9.print the json response length",
															"var jsonData = pm.response.json(); ",
															"console.log(\"The Length of Json Response =\"+ jsonData.length);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8854f135-2609-4f96-8a1e-3b981d54d1ac",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}",
															"description": "sGuard"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "401-UnAuthorized",
									"item": [
										{
											"name": "Get All Subscriptions Without AccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb42e2b7-743c-41c8-8400-7989c6ae842a",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 401) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\",\r",
															"        \"Transfer-Encoding\" : \"chunked\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"pm.test(\"check the status code in response is 401\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(401); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
															"    });\r",
															"\r",
															"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
															"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
															"    });\r",
															"    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "aad6b3e0-79a4-454f-b96e-1072e1473fe7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}",
															"description": "sGuard"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "404-Not Found",
									"item": [
										{
											"name": "Get All Subscriptions  with Invalid or blank ConsumerId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c02912d0-1db6-4a31-bab1-faef75666862",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a3a8a6b3-ad4f-406e-936a-10de24e3f978",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET-One Subscription Data",
							"item": [
								{
									"name": "200-Sucess/Ok",
									"item": [
										{
											"name": "GetOne Subscription",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fa70f097-590b-4618-8c7f-c2651aeea8f4",
														"exec": [
															"",
															"//->1.Verify the status code in response body",
															"pm.test(\"Request was successful and Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"}); ",
															"",
															"//->2.Verify the Header is present or not ",
															"pm.test(\"Content-Type header is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    ",
															"//->3.Verify the response should be successfull",
															"pm.test(\"response should be okay to process\", function () { ",
															"    pm.response.to.not.be.error; ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															" ",
															"// ->4.Verify the response must be valid json body ",
															"pm.test(\"response must be valid and have a json body\", function () {",
															"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
															"     // assert that the response has a valid JSON body",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
															"});",
															"",
															"//->5. Verify the Response headers ",
															"pass = true;",
															"fail = false;",
															"",
															"if (responseCode.code === 200 || responseCode.code === 201) {",
															"    tests[\"Request Succesfully Sent\"] = pass;",
															"",
															"    headers = {",
															"        \"Content-Type\": \"application/json\"",
															"    }",
															"",
															"    for (var i in headers) {",
															"        result = postman.getResponseHeader(i);",
															"        if (headers[i] === result)",
															"            tests[i + \" header value is present\"] = pass;",
															"        else",
															"            tests[i + \" header value is not present\"] = fail;",
															"",
															"    }",
															"    ",
															"}",
															"",
															"});",
															"",
															"//->6.print the json response ",
															"var jsonData = pm.response.json(); ",
															"console.log(jsonData);",
															"",
															"//->7.Verify the Response Time ",
															"pm.test(\"Response time is less than 30000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);",
															"});",
															"//->7.Verify the Response Size",
															"pm.test(\"Response size is less than 1MB\", function () {",
															"    pm.expect(pm.response.responseSize).to.be.below(1000000);",
															"});",
															"",
															"//->8.Verify the Response  data ",
															"var jsonData = pm.response.json(); ",
															"pm.test(\"Response is not null\", function () { ",
															"        pm.expect(jsonData).to.not.equal(null);",
															"    });",
															"",
															"//->9.print the json response length",
															"var jsonData = pm.response.json(); ",
															"console.log(\"The Length of Json Response =\"+ jsonData.length);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "id",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "401-UnAuthorized",
									"item": [
										{
											"name": "GetOne Subscription without AccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9f8c5b7-e430-44ed-b4e2-4b02a279b2c7",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 401) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\",\r",
															"        \"Transfer-Encoding\" : \"chunked\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"pm.test(\"check the status code in response is 401\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(401); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
															"    });\r",
															"\r",
															"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
															"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
															"    });\r",
															"    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerId}}"
														},
														{
															"key": "id",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "404-Not Found",
									"item": [
										{
											"name": "GetOne Subscription With Bank or invalid ConsumerId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "702c3307-27d0-4783-bb2f-cc587e7f8b66",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(404); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Not Found\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is No message available\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
															"    });\r",
															"    */\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": ""
														},
														{
															"key": "id",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GetOne Subscription with invalid ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "91e4d9f3-b141-450d-ba5f-0dc5eeac05b8",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "id",
															"value": "2020"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET-Data As per Subscription Key",
							"item": [
								{
									"name": "200-Sucess/Ok",
									"item": [
										{
											"name": "Get Data as per Subscription Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8738c4c7-d54d-4bd5-9897-ad8344906959",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															"//->3.Verify the response should be successfull\r",
															"pm.test(\"response should be okay to process\", function () { \r",
															"    pm.response.to.not.be.error; \r",
															"    pm.response.to.not.have.jsonBody(\"error\"); \r",
															"});\r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the status code is 200\r",
															"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 200 || responseCode.code === 201) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->8.Verify the Response Size\r",
															"pm.test(\"Response size is less than 2MB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
															"});\r",
															"\r",
															"\r",
															"//->9.print the json response length\r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
															"\r",
															"//->10.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"//->Verify the Json Schema \r",
															"\r",
															"/*var schema  ={\r",
															"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
															"    \"$id\": \"http://example.com/example.json\",\r",
															"    \"type\": \"object\",\r",
															"    \"title\": \"The Root Schema\",\r",
															"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
															"    \"required\": [\r",
															"        \"context\",\r",
															"        \"ontology\",\r",
															"        \"usage\",\r",
															"        \"access\",\r",
															"        \"coredata\"\r",
															"    ],\r",
															"    \"properties\": {\r",
															"        \"context\": {\r",
															"            \"$id\": \"#/properties/context\",\r",
															"            \"type\": \"object\",\r",
															"            \"title\": \"The Context Schema\",\r",
															"            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"            \"default\": {},\r",
															"            \"examples\": [\r",
															"                {\r",
															"                    \"dataSource\": \"tdb\",\r",
															"                    \"objectId\": \"UTCaaS\",\r",
															"                    \"timestamp\": \"2020-01-31T00:25:54.045Z\",\r",
															"                    \"objectType\": \"Subsystem_Description\",\r",
															"                    \"marker\": {\r",
															"                        \"Type\": \"UTCaaS\"\r",
															"                    },\r",
															"                    \"location\": {\r",
															"                        \"locationCountry\": \"DE\",\r",
															"                        \"locationDivision\": \"BY\",\r",
															"                        \"locationCity\": \"NUL\"\r",
															"                    },\r",
															"                    \"Rel_Ids\": []\r",
															"                }\r",
															"            ],\r",
															"            \"required\": [\r",
															"                \"dataSource\",\r",
															"                \"objectId\",\r",
															"                \"objectType\",\r",
															"                \"timestamp\",\r",
															"                \"location\",\r",
															"                \"Rel_Ids\",\r",
															"                \"marker\"\r",
															"            ],\r",
															"            \"properties\": {\r",
															"                \"dataSource\": {\r",
															"                    \"$id\": \"#/properties/context/properties/dataSource\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Datasource Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"tdb\"\r",
															"                    ]\r",
															"                },\r",
															"                \"objectId\": {\r",
															"                    \"$id\": \"#/properties/context/properties/objectId\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Objectid Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"UTCaaS\"\r",
															"                    ]\r",
															"                },\r",
															"                \"objectType\": {\r",
															"                    \"$id\": \"#/properties/context/properties/objectType\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Objecttype Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"Subsystem_Description\"\r",
															"                    ]\r",
															"                },\r",
															"                \"timestamp\": {\r",
															"                    \"$id\": \"#/properties/context/properties/timestamp\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Timestamp Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"2020-01-31T00:25:54.045Z\"\r",
															"                    ]\r",
															"                },\r",
															"                \"location\": {\r",
															"                    \"$id\": \"#/properties/context/properties/location\",\r",
															"                    \"type\": \"object\",\r",
															"                    \"title\": \"The Location Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": {},\r",
															"                    \"examples\": [\r",
															"                        {\r",
															"                            \"locationCountry\": \"DE\",\r",
															"                            \"locationDivision\": \"BY\",\r",
															"                            \"locationCity\": \"NUL\"\r",
															"                        }\r",
															"                    ],\r",
															"                    \"required\": [\r",
															"                        \"locationCountry\",\r",
															"                        \"locationDivision\",\r",
															"                        \"locationCity\"\r",
															"                    ],\r",
															"                    \"properties\": {\r",
															"                        \"locationCountry\": {\r",
															"                            \"$id\": \"#/properties/context/properties/location/properties/locationCountry\",\r",
															"                            \"type\": \"string\",\r",
															"                            \"title\": \"The Locationcountry Schema\",\r",
															"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                            \"default\": \"\",\r",
															"                            \"examples\": [\r",
															"                                \"DE\"\r",
															"                            ]\r",
															"                        },\r",
															"                        \"locationDivision\": {\r",
															"                            \"$id\": \"#/properties/context/properties/location/properties/locationDivision\",\r",
															"                            \"type\": \"string\",\r",
															"                            \"title\": \"The Locationdivision Schema\",\r",
															"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                            \"default\": \"\",\r",
															"                            \"examples\": [\r",
															"                                \"BY\"\r",
															"                            ]\r",
															"                        },\r",
															"                        \"locationCity\": {\r",
															"                            \"$id\": \"#/properties/context/properties/location/properties/locationCity\",\r",
															"                            \"type\": \"string\",\r",
															"                            \"title\": \"The Locationcity Schema\",\r",
															"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                            \"default\": \"\",\r",
															"                            \"examples\": [\r",
															"                                \"NUL\"\r",
															"                            ]\r",
															"                        }\r",
															"                    }\r",
															"                },\r",
															"                \"Rel_Ids\": {\r",
															"                    \"$id\": \"#/properties/context/properties/Rel_Ids\",\r",
															"                    \"type\": \"array\",\r",
															"                    \"title\": \"The Rel_ids Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": []\r",
															"                },\r",
															"                \"marker\": {\r",
															"                    \"$id\": \"#/properties/context/properties/marker\",\r",
															"                    \"type\": \"object\",\r",
															"                    \"title\": \"The Marker Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": {},\r",
															"                    \"examples\": [\r",
															"                        {\r",
															"                            \"Type\": \"UTCaaS\"\r",
															"                        }\r",
															"                    ],\r",
															"                    \"required\": [\r",
															"                        \"Type\"\r",
															"                    ],\r",
															"                    \"properties\": {\r",
															"                        \"Type\": {\r",
															"                            \"$id\": \"#/properties/context/properties/marker/properties/Type\",\r",
															"                            \"type\": \"string\",\r",
															"                            \"title\": \"The Type Schema\",\r",
															"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                            \"default\": \"\",\r",
															"                            \"examples\": [\r",
															"                                \"UTCaaS\"\r",
															"                            ]\r",
															"                        }\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"        },\r",
															"        \"ontology\": {\r",
															"            \"$id\": \"#/properties/ontology\",\r",
															"            \"type\": \"object\",\r",
															"            \"title\": \"The Ontology Schema\",\r",
															"            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"            \"default\": {},\r",
															"            \"examples\": [\r",
															"                {}\r",
															"            ]\r",
															"        },\r",
															"        \"usage\": {\r",
															"            \"$id\": \"#/properties/usage\",\r",
															"            \"type\": \"object\",\r",
															"            \"title\": \"The Usage Schema\",\r",
															"            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"            \"default\": {},\r",
															"            \"examples\": [\r",
															"                {}\r",
															"            ]\r",
															"        },\r",
															"        \"access\": {\r",
															"            \"$id\": \"#/properties/access\",\r",
															"            \"type\": \"object\",\r",
															"            \"title\": \"The Access Schema\",\r",
															"            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"            \"default\": {},\r",
															"            \"examples\": [\r",
															"                {}\r",
															"            ]\r",
															"        },\r",
															"        \"coredata\": {\r",
															"            \"$id\": \"#/properties/coredata\",\r",
															"            \"type\": \"object\",\r",
															"            \"title\": \"The Coredata Schema\",\r",
															"            \"description\": \"An explanation about the purpose of this instance.\",\r",
															"            \"default\": {},\r",
															"            \"examples\": [\r",
															"                {\r",
															"                    \"timestamp\": \"2020-01-31T00:25:54.045Z\",\r",
															"                    \"objectType\": \"Subsystem_Description\",\r",
															"                    \"Type\": \"UTCaaS\",\r",
															"                    \"publishing_timestamp\": \"2020-03-12T06:10:19.048Z\",\r",
															"                    \"id\": \"UTCaaS\",\r",
															"                    \"Rel_Ids\": [],\r",
															"                    \"Name\": \"UTCaaS\",\r",
															"                    \"controllerId\": \"DE-BY-NUL-UTCaaS\"\r",
															"                }\r",
															"            ],\r",
															"            \"required\": [\r",
															"                \"id\",\r",
															"                \"Name\",\r",
															"                \"Type\",\r",
															"                \"Rel_Ids\",\r",
															"                \"objectType\",\r",
															"                \"controllerId\",\r",
															"                \"timestamp\",\r",
															"                \"publishing_timestamp\"\r",
															"            ],\r",
															"            \"properties\": {\r",
															"                \"id\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/id\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Id Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"UTCaaS\"\r",
															"                    ]\r",
															"                },\r",
															"                \"Name\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/Name\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Name Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"UTCaaS\"\r",
															"                    ]\r",
															"                },\r",
															"                \"Type\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/Type\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Type Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"UTCaaS\"\r",
															"                    ]\r",
															"                },\r",
															"                \"Rel_Ids\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/Rel_Ids\",\r",
															"                    \"type\": \"array\",\r",
															"                    \"title\": \"The Rel_ids Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": []\r",
															"                },\r",
															"                \"objectType\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/objectType\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Objecttype Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"Subsystem_Description\"\r",
															"                    ]\r",
															"                },\r",
															"                \"controllerId\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/controllerId\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Controllerid Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"DE-BY-NUL-UTCaaS\"\r",
															"                    ]\r",
															"                },\r",
															"                \"timestamp\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/timestamp\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Timestamp Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"2020-01-31T00:25:54.045Z\"\r",
															"                    ]\r",
															"                },\r",
															"                \"publishing_timestamp\": {\r",
															"                    \"$id\": \"#/properties/coredata/properties/publishing_timestamp\",\r",
															"                    \"type\": \"string\",\r",
															"                    \"title\": \"The Publishing_timestamp Schema\",\r",
															"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
															"                    \"default\": \"\",\r",
															"                    \"examples\": [\r",
															"                        \"2020-03-12T06:10:19.048Z\"\r",
															"                    ]\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test('Schema Validation', function() {\r",
															"    \r",
															"    var result=tv4.validateResult(pm.response.json(), schema);\r",
															" \r",
															"    if(!result.valid){\r",
															"        console.log(result);\r",
															"    }\r",
															" \r",
															"    pm.expect(result.valid).to.be.true;\r",
															"})\r",
															"*/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "category",
															"value": "{{category}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "400-Bad Request",
									"item": [
										{
											"name": "Get Data as per Subscription key with InvalidCategory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "274f52c9-3e26-44a4-a978-778feb2b957a",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 400) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 400\", function () { \r",
															"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
															"    });\r",
															"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Request Message is Invalid\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Request Message is Invalid\"); \r",
															"    });\r",
															"  */  \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "category",
															"value": "InvalidCategory"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "401-UnAuthorized",
									"item": [
										{
											"name": "Get Data as per Subscription Key Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "71d8d104-58fe-45cd-af59-fd536774a0b4",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 401) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\",\r",
															"        \"Transfer-Encoding\" : \"chunked\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"pm.test(\"check the status code in response is 401\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(401); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
															"    });\r",
															"\r",
															"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
															"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
															"    });\r",
															"    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "category",
															"value": "{{category}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "404-Not Found",
									"item": [
										{
											"name": "Get Data as per Subscription Key with Blank ConsumerID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c1a66dcf-f0ef-4553-95fb-d40f32b8a177",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(404); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Not Found\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is No message available\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
															"    });\r",
															" */   \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": ""
														},
														{
															"key": "category",
															"value": "{{category}}"
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Data as per Subscription Key with Blank Catagory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "986a2008-2e09-4eac-ae96-3c1ccf48ece1",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(404); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Not Found\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is No message available\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
															"    });\r",
															"    */\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "category",
															"value": ""
														},
														{
															"key": "key",
															"value": "{{key}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Data as per Subscription Key with Blank key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c193fb28-ed2e-44ce-a726-e44d88bb137e",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(404); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Not Found\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is No message available\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
															"    });\r",
															"   */ \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "category",
															"value": "{{category}}"
														},
														{
															"key": "key",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Data as per Subscription Key with Invalid key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cae2fa13-99b7-4dc9-83ff-401b28639a34",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"/*\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
															"    });\r",
															"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\"); \r",
															"    });\r",
															"*/    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"data",
														":consumerId",
														":category",
														":key"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "category",
															"value": "{{category}}"
														},
														{
															"key": "key",
															"value": "APIKEY2020"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DELETE-Subscription By ID",
							"item": [
								{
									"name": "200-Success/Ok",
									"item": [
										{
											"name": "Delete the Subscription",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d29aa7a9-018d-41f4-8a94-5b1d01ef201b",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"\r",
															"    \r",
															"//->3.Verify the response should be successfull\r",
															"pm.test(\"response should be okay to process\", function () { \r",
															"    pm.response.to.not.be.error; \r",
															"    pm.response.to.not.have.jsonBody(\"error\"); \r",
															"});\r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the status code is 200\r",
															"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 200 || responseCode.code === 201) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->8.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"\r",
															"//->9.print the json response length\r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerid4}}"
														},
														{
															"key": "id",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "401-UnAuthorized",
									"item": [
										{
											"name": "Delete the Subscription Without AccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3cea49fc-d5d9-4477-b859-33a9c2401fae",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 401) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\",\r",
															"        \"Transfer-Encoding\" : \"chunked\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"\r",
															"pm.test(\"check the status code in response is 401\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(401); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
															"    });\r",
															"\r",
															"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
															"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
															"    });\r",
															"    \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerId}}"
														},
														{
															"key": "id",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "404-Not Found",
									"item": [
										{
											"name": "Delete the Subscription with invalid ConsumerId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "09bb1e13-9517-468d-90e3-ac8d28d94cf7",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(404); \r",
															"    });\r",
															"pm.test(\"Check the error in response is Not Found\", function () { \r",
															"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is No message available\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
															"    });\r",
															"    */\r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiI3N2ZlZDlmNi05OWZlLTQ4NjgtODAwMy1kNjNhMGJiMzY3YTEiLCJleHAiOjE1OTI1NDU3MTksIm5iZiI6MCwiaWF0IjoxNTkxNjgxNzE5LCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImY0ZDBiNzM4LTY4MjYtNDI5MC1iY2YzLWQxYWVmZDQyZjE1OCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.Ct-5ClEPmyUUFsWHEoQ4zDwfOq7xSqhx9-wSBha96JqzjYtEGMRGA0hT-mGxPfRsvn9pEhFryhmJmorsjo4VmR77l9BakkPsTOwEKUZC3-jL1kw_1dBRQH_3nheuukWu9VgddBJI6NY3H_JWUkrUGh7_vcCDbz2y8u8zM0XT41snmXgzYpF-CTHGYE2IvO-FN8D84t43YZ5qkLCMfPr0imDubA2n_SQr8LATB9DjO4fH5uEPT05TezfBNo5jj4sXaNTWAcsp6LId61pXcOgrIgpjpZHC-NdqgbAfWdzirpxh43M4fb-G3eFe-7cGMb4Q7qvKuVsvNjGNF7ozOUsprg",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerId}}"
														},
														{
															"key": "id",
															"value": "{{id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the Subscription with Invalid ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "02c13528-a1cd-42d9-bb0b-825f464f42c0",
														"exec": [
															"\r",
															"//->1.Verify the status code in response body\r",
															"pm.test(\"Request was successful and Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"}); \r",
															"\r",
															"//->2.Verify the Header is present or not \r",
															"pm.test(\"Content-Type header is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    \r",
															" \r",
															"// ->4.Verify the response must be valid json body \r",
															"pm.test(\"response must be valid and have a json body\", function () {\r",
															"     // assert that the response has a valid JSON body\r",
															"     pm.response.to.be.withBody;\r",
															"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
															"});\r",
															"\r",
															"//->5. Verify the Response headers \r",
															"pass = true;\r",
															"fail = false;\r",
															"\r",
															"if (responseCode.code === 404) {\r",
															"    tests[\"Request Succesfully Sent\"] = pass;\r",
															"\r",
															"    headers = {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    }\r",
															"\r",
															"    for (var i in headers) {\r",
															"        result = postman.getResponseHeader(i);\r",
															"        if (headers[i] === result)\r",
															"            tests[i + \" header value is present in response\"] = pass;\r",
															"        else\r",
															"            tests[i + \" header value is not present in response\"] = fail;\r",
															"\r",
															"    }\r",
															"    \r",
															"}\r",
															"\r",
															"});\r",
															"\r",
															"//->6.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(\"Length of json response data =\" +jsonData.length);\r",
															"\r",
															"//->7.Verify the Response Time \r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"//->7.Verify the Response Size\r",
															"pm.test(\"Response size is less than 15KB\", function () {\r",
															"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
															"});\r",
															"\r",
															"//->8.Verify the Response  data \r",
															"var jsonData = pm.response.json(); \r",
															"\r",
															"pm.test(\"Response is not null\", function () { \r",
															"        pm.expect(jsonData).to.not.equal(null);\r",
															"    });\r",
															"/*\r",
															"pm.test(\"check the status code in response is 404\", function () { \r",
															"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
															"    });\r",
															"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
															"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
															"    });\r",
															"    \r",
															"pm.test(\"Check the message in response is Consumer ID: FlowAI id: 2020 not found\", function () { \r",
															"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI id: 2020 not found\"); \r",
															"    });\r",
															"   */ \r",
															"//->9.print the json response \r",
															"var jsonData = pm.response.json(); \r",
															"console.log(jsonData)\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiI3N2ZlZDlmNi05OWZlLTQ4NjgtODAwMy1kNjNhMGJiMzY3YTEiLCJleHAiOjE1OTI1NDU3MTksIm5iZiI6MCwiaWF0IjoxNTkxNjgxNzE5LCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImY0ZDBiNzM4LTY4MjYtNDI5MC1iY2YzLWQxYWVmZDQyZjE1OCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.Ct-5ClEPmyUUFsWHEoQ4zDwfOq7xSqhx9-wSBha96JqzjYtEGMRGA0hT-mGxPfRsvn9pEhFryhmJmorsjo4VmR77l9BakkPsTOwEKUZC3-jL1kw_1dBRQH_3nheuukWu9VgddBJI6NY3H_JWUkrUGh7_vcCDbz2y8u8zM0XT41snmXgzYpF-CTHGYE2IvO-FN8D84t43YZ5qkLCMfPr0imDubA2n_SQr8LATB9DjO4fH5uEPT05TezfBNo5jj4sXaNTWAcsp6LId61pXcOgrIgpjpZHC-NdqgbAfWdzirpxh43M4fb-G3eFe-7cGMb4Q7qvKuVsvNjGNF7ozOUsprg",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
													"host": [
														"{{url}}"
													],
													"path": [
														"v1",
														"api",
														"subscription",
														":consumerId",
														":id"
													],
													"variable": [
														{
															"key": "consumerId",
															"value": "{{consumerId}}"
														},
														{
															"key": "id",
															"value": "2020"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HistoricalData-Hive s3-Presto",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0274280e-5fdd-47ea-9453-5c115cf657cc",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"/*\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"pm.test(\"consumerId field is present in response\", function () { \r",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); \r",
											"    });\r",
											"pm.test(\"category field is present in response\", function () { \r",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); \r",
											"    });\r",
											"    \r",
											"pm.test(\"Filter field is present in response\", function () { \r",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
											"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
											"    });\r",
											"    \r",
											"pm.test(\"dataEndpoint field is present in response\", function () { \r",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");\r",
											"    });  \r",
											"*/\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME1}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME1}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba173520-322f-4754-b876-a98b952eb9bb",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 2MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"/*",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}",
											"description": "sGuard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f832d7e-18f3-467f-91da-37110b528434",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 15KB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "764e63a3-db80-4452-989e-412dcf6ac819",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 5MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"//->10.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"\r",
											"/*pm.test(\"contextobjectType field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.objectType).is.to.equal(pm.environment.get(\"contextobjectType\")); \r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"locationCountry field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.location.locationCountry).is.to.equal(pm.environment.get(\"locationCountry\")); \r",
											"    });\r",
											"        \r",
											"pm.test(\"locationDivision field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.location.locationDivision).is.to.equal(pm.environment.get(\"locationDivision\")); \r",
											"    }); \r",
											"    \r",
											"pm.test(\"locationCity field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.location.locationCity).is.to.equal(pm.environment.get(\"locationCity\")); \r",
											"    }); \r",
											"    \r",
											" //->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"contextobjectType\", jsonData[0].context.objectType);\r",
											"postman.setEnvironmentVariable(\"contextobjectId\", jsonData[0].context.objectId);\r",
											"postman.setEnvironmentVariable(\"contexttimestamp\", jsonData[0].context.timestamp);\r",
											"postman.setEnvironmentVariable(\"locationCountry\", jsonData[0].context.location.locationCountry);\r",
											"postman.setEnvironmentVariable(\"locationDivision\", jsonData[0].context.location.locationDivision);\r",
											"postman.setEnvironmentVariable(\"locationCity\", jsonData[0].context.location.locationCity);\r",
											"postman.setEnvironmentVariable(\"coredataid\", jsonData[0].coredata.id);\r",
											"postman.setEnvironmentVariable(\"controllerId\", jsonData[0].coredata.controllerId);\r",
											"postman.setEnvironmentVariable(\"coredatatimestamp\", jsonData[0].coredata.timestamp);\r",
											"postman.setEnvironmentVariable(\"publishing_timestamp\", jsonData[0].coredata.publishing_timestamp);\r",
											"\r",
											"console.log('contextobjectType is ',pm.environment.get(\"contextobjectType\"));\r",
											"console.log('contextobjectId is ',pm.environment.get(\"contextobjectId\"));\r",
											"console.log('contexttimestamp is ',pm.environment.get(\"contexttimestamp\"));\r",
											"console.log('locationCountry is ',pm.environment.get(\"locationCountry\"));\r",
											"console.log('locationDivision is ',pm.environment.get(\"locationDivision\"));\r",
											"console.log('locationCity is ',pm.environment.get(\"locationCity\"));\r",
											"console.log('coredataid is ',pm.environment.get(\"coredataid\"));\r",
											"console.log('controllerId is ',pm.environment.get(\"controllerId\"));\r",
											"console.log('coredatatimestamp is ',pm.environment.get(\"coredatatimestamp\"));\r",
											"console.log('publishing_timestamp is ',pm.environment.get(\"publishing_timestamp\"));\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8cce7b3-5b88-4f6e-89d5-30e6730dac72",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 15KB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Folder for v1",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6dda5c13-0017-4267-a0b5-d2fba32eab47",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0fee1dc9-bc35-47b3-baaf-4f284b40b057",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "295842d5-8174-4172-902b-dc90c0b275d0",
			"key": "currentAccessToken",
			"value": "",
			"disabled": true
		},
		{
			"id": "93461078-fda4-4cfc-b0ad-1922925a9ad4",
			"key": "accessTokenExpiry",
			"value": "",
			"disabled": true
		}
	],
	"protocolProfileBehavior": {}
}